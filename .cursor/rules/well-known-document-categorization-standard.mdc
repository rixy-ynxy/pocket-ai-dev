---
description: 
globs: 
alwaysApply: false
---
# Well-Known標準と@仕様ドキュメント汎用区分管理ルール

本ルールは、技術標準・仕様書を汎用標準（`.well-known`）とプロジェクト固有仕様（`@仕様`）に適切に区分するための汎用ガイドラインを定義します。任意のプロジェクト・技術スタックで適用可能です。

## 📋 ドキュメント区分の基本原則

### 1. 汎用標準 (`.well-known/`) 配置基準
**「プロジェクトに依存しない、再利用可能な技術標準」**

```yaml
Well_Known_配置対象:
  技術アーキテクチャ標準:
    - "認証・認可の一般的パターン"
    - "データベース設計標準"
    - "API設計の汎用パターン"
    - "セキュリティ標準ガイドライン"
    - "マイクロサービス設計原則"
    
  設計パターン・ベストプラクティス:
    - "MVCアーキテクチャパターン"
    - "リポジトリパターン"
    - "ファクトリーパターン"
    - "メッセージング標準パターン"
    - "エラーハンドリング標準"
    
  汎用データモデル:
    - "ユーザー管理標準インターフェース"
    - "ログ・監査標準フォーマット"
    - "設定管理標準構造"
    - "状態管理標準パターン"
    
  品質・テスト標準:
    - "テスト戦略標準"
    - "コード品質基準"
    - "パフォーマンス標準"
    - "ドキュメント標準"
    
  運用・DevOps標準:
    - "CI/CD パイプライン標準"
    - "監視・ログ収集標準"
    - "デプロイ戦略標準"
    - "インフラ構成標準"
```

### 2. プロジェクト固有仕様 (`@仕様`) 配置基準
**「特定プロジェクトに固有の実装詳細・設定値」**

```yaml
Project_Specification_配置対象:
  具体的実装詳細:
    - "データベーススキーマ・テーブル設計"
    - "外部サービスのエンドポイント・API仕様"
    - "環境変数・設定ファイルの具体値"
    - "実装済みファイル・クラス・メソッド詳細"
    
  プロジェクト固有設定:
    - "環境別設定値（dev/staging/prod）"
    - "サードパーティサービス連携設定"
    - "デプロイ・インフラ構成詳細"
    - "監視・アラート設定詳細"
    
  ビジネス要件・仕様:
    - "業務フロー・ワークフロー"
    - "ユーザーロール・権限の具体定義"
    - "業務ルール・バリデーション仕様"
    - "UI/UX要件・デザイン仕様"
    
  実装・運用詳細:
    - "APIエンドポイント実装詳細"
    - "テストスイート・テストケース"
    - "デプロイ手順・運用手順"
    - "今後の機能拡張計画・ロードマップ"
```

---

## 🎯 区分判定フローチャート

### 判定質問による自動区分

```yaml
ドキュメント区分判定フロー:
  質問1_汎用性:
    - Q: "この内容は他のプロジェクトでも再利用できるか？"
    - YES → Well-Known候補
    - NO → Project-Specific候補
    
  質問2_抽象度:
    - Q: "この内容は実装非依存の標準・パターンか？"
    - YES → Well-Known候補
    - NO → Project-Specific候補
    
  質問3_具体性:
    - Q: "この内容に具体的な設定値・固有名詞が含まれるか？"
    - YES → Project-Specific確定
    - NO → Well-Known候補
    
  質問4_技術依存性:
    - Q: "この内容は特定の技術スタック・ツールに依存するか？"
    - 汎用的 → Well-Known候補
    - 固有的 → Project-Specific候補
    
  最終判定:
    - Well-Known候補が多数 → .well-known/standards/ 配置
    - Project-Specific候補が多数 → プロジェクトdocs/ 配置
```

---

## 📂 ディレクトリ構造・命名規則

### 1. Well-Known標準の配置構造

```yaml
.well-known/
  standards/
    architecture/
      - "システムアーキテクチャ標準"
      - "設計パターン標準"
      - "レイヤー構成標準"
      
    components/
      security/
        - "認証・認可標準"
        - "セキュリティパターン"
      data/
        - "データモデル標準"
        - "データベース設計標準"
      communication/
        - "API設計標準"
        - "メッセージング標準"
      quality/
        - "テスト戦略標準"
        - "品質管理標準"
        
    principles/
      - "設計原則"
      - "ベストプラクティス"
      - "コーディング標準"
      
    deployment/
      - "CI/CD標準"
      - "運用標準"
      - "監視標準"
      
    templates/
      - "プロジェクトテンプレート"
      - "ドキュメントテンプレート"
      - "設定ファイルテンプレート"
```

### 2. プロジェクト固有仕様の配置構造

```yaml
{project-name}-docs/
  requirements/
    - "要求仕様書"
    - "業務要件定義"
    - "システム要件定義"
    
  specifications/
    - "技術仕様書"
    - "API仕様書"
    - "データベース設計書"
    - "UI/UX仕様書"
    
  implementation/
    - "実装詳細書"
    - "設定管理書"
    - "環境構築手順書"
    
  operations/
    - "運用手順書"
    - "デプロイ手順書"
    - "監視・保守手順書"
    
  testing/
    - "テスト計画書"
    - "テストケース"
    - "品質保証手順書"
    
  planning/
    - "開発計画書"
    - "リリース計画書"
    - "拡張計画書"
```

---

## ⚖️ 区分判定の具体例

### 例1: Webアプリケーション認証システム

```yaml
認証システム区分例:
  Well_Known_配置内容:
    - "JWT認証パターン標準"
    - "OAuth2.0フロー設計標準"
    - "セッション管理パターン"
    - "ロールベースアクセス制御(RBAC)標準"
    - "多要素認証(MFA)実装パターン"
    
  Project_Specific_配置内容:
    - "Firebase/Auth0/Cognito具体的設定"
    - "ユーザーロール・権限マトリクス(具体値)"
    - "セッション制約の具体的設定値"
    - "認証API実装コード詳細"
    - "認証フロー画面設計"
```

### 例2: データベース設計

```yaml
データベース設計区分例:
  Well_Known_配置内容:
    - "リレーショナルDB設計原則"
    - "NoSQL設計パターン"
    - "インデックス設計標準"
    - "データベースセキュリティ標準"
    - "バックアップ・リストア標準"
    
  Project_Specific_配置内容:
    - "PostgreSQL/MySQL/MongoDB具体的スキーマ"
    - "テーブル・コレクション定義詳細"
    - "マイグレーション実行手順"
    - "環境別データベース接続設定"
    - "データ投入・初期化スクリプト"
```

### 例3: API設計・実装

```yaml
API設計区分例:
  Well_Known_配置内容:
    - "RESTful API設計原則"
    - "GraphQL設計パターン"
    - "API バージョニング戦略"
    - "API セキュリティ標準"
    - "エラーハンドリング標準"
    
  Project_Specific_配置内容:
    - "FastAPI/Express/Spring Boot実装詳細"
    - "エンドポイント仕様書(具体URL・パラメータ)"
    - "レスポンス・スキーマ定義"
    - "API Gateway設定詳細"
    - "API使用例・サンプルコード"
```

### 例4: フロントエンド開発

```yaml
フロントエンド開発区分例:
  Well_Known_配置内容:
    - "コンポーネント設計原則"
    - "状態管理パターン"
    - "レスポンシブデザイン標準"
    - "アクセシビリティ標準"
    - "パフォーマンス最適化標準"
    
  Project_Specific_配置内容:
    - "React/Vue/Angular実装詳細"
    - "コンポーネント構成・ディレクトリ構造"
    - "デザインシステム・UI仕様"
    - "ビルド・バンドル設定詳細"
    - "フロントエンド環境構築手順"
```

---

## 🔄 区分見直し・メンテナンスルール

### 1. 定期的区分見直し

```yaml
区分見直しトリガー:
  タイミング:
    - "新機能・新技術導入時"
    - "アーキテクチャ大幅変更時"
    - "プロジェクト完了・振り返り時"
    - "四半期ドキュメントレビュー時"
    
  見直し観点:
    - "汎用化・標準化可能性の増加"
    - "実装技術依存度の変化"
    - "他プロジェクトでの再利用実績"
    - "業界標準・ベストプラクティスの進化"
```

### 2. 区分変更手順

```yaml
区分変更プロセス:
  Well_Known_への移行:
    1. "プロジェクト固有要素の特定・抽出"
    2. "汎用化・抽象化・標準化"
    3. "Well-Known標準として再構成"
    4. "プロジェクト仕様に標準参照を追加"
    5. "他プロジェクトでの適用性検証"
    
  Project_Specific_への移行:
    1. "Well-Known標準の特定プロジェクトへの適用"
    2. "プロジェクト固有要素・制約の追加"
    3. "具体的実装詳細・設定値の補完"
    4. "Well-Known標準への参照関係維持"
    5. "実装チームでの利用可能性確認"
```

---

## 📝 区分作業時のベストプラクティス

### 1. ドキュメント作成時のチェックリスト

```yaml
Well_Known_作成チェックリスト:
  汎用性確認:
    - [ ] プロジェクト名・固有名詞を除去済み
    - [ ] 具体的設定値を変数・パラメータ化済み
    - [ ] 特定技術スタックに依存しない記述
    - [ ] 複数プロジェクトでの適用可能性確認
    
  標準品質確認:
    - [ ] 階層化された明確な構造
    - [ ] 拡張・カスタマイズ可能な設計
    - [ ] 適用範囲・制約の明確化
    - [ ] 実装ガイダンス・例示の提供
    
  保守性確認:
    - [ ] バージョン管理・更新履歴
    - [ ] 他標準との依存関係明記
    - [ ] 変更影響範囲の明確化

Project_Specific_作成チェックリスト:
  具体性確認:
    - [ ] Well-Known標準への明確な参照
    - [ ] プロジェクト固有要素の明確化
    - [ ] 即座に実装可能な詳細度
    - [ ] 環境・設定の具体的記述
    
  実用性確認:
    - [ ] 開発チームが実装で利用可能
    - [ ] 運用チームが保守で利用可能
    - [ ] トラブルシューティング手順完備
    - [ ] 拡張・改修の計画・手順記載
    
  整合性確認:
    - [ ] Well-Known標準との整合性
    - [ ] プロジェクト内他仕様との整合性
    - [ ] 技術スタック全体との整合性
```

### 2. 相互参照・トレーサビリティ管理

```yaml
相互参照管理ルール:
  Well_Known_からの参照:
    - "適用方法・カスタマイズポイント明記"
    - "実装例・テンプレート提供"
    - "プロジェクト固有化の指針提示"
    
  Project_Specific_からの参照:
    - "準拠するWell-Known標準の明記"
    - "標準からの変更・カスタマイズ点明記"
    - "標準更新時の影響範囲・対応手順明記"
    
  トレーサビリティ管理:
    - "変更影響範囲の自動追跡"
    - "整合性確認の定期実行"
    - "バージョン管理・履歴追跡"
    - "依存関係マップの維持"
```

---

## 🎯 実践適用ガイド

### 新規プロジェクト開始時

```yaml
新規プロジェクト適用手順:
  Phase_1_準備:
    1. "既存Well-Known標準の調査・選定"
    2. "プロジェクト要件とのマッピング"
    3. "適用可能標準の特定"
    4. "カスタマイズ必要箇所の洗い出し"
    
  Phase_2_基盤構築:
    1. "プロジェクトdocsディレクトリ構築"
    2. "Well-Known標準参照の仕様書作成"
    3. "プロジェクト固有要素の仕様化"
    4. "開発チーム向けガイドライン作成"
    
  Phase_3_運用開始:
    1. "ドキュメント区分ルールの徹底"
    2. "定期的な整合性確認プロセス"
    3. "標準更新・改善のフィードバック"
    4. "プロジェクト完了時の標準への還元"
```

### 既存プロジェクト適用時

```yaml
既存プロジェクト適用手順:
  Phase_1_現状分析:
    1. "既存ドキュメントの棚卸し"
    2. "汎用化可能要素の特定"
    3. "プロジェクト固有要素の切り分け"
    4. "移行優先度・影響度の評価"
    
  Phase_2_段階的移行:
    1. "高汎用性要素のWell-Known化"
    2. "プロジェクト固有仕様の整理・統合"
    3. "相互参照関係の整備"
    4. "段階的移行・検証"
    
  Phase_3_継続改善:
    1. "移行後の効果測定"
    2. "運用プロセスの最適化"
    3. "他プロジェクトへの横展開"
    4. "標準の継続的改善"
```

---

**作成日**: 2025年12月27日  
**適用範囲**: 全プロジェクト・全技術スタック  
**更新頻度**: 四半期または重要技術変更時

*このルールは、技術スタック・プロジェクト規模に関わらず、技術標準の汎用性と実装仕様の具体性を適切に区分し、再利用可能で保守性の高いドキュメント体系を構築するための汎用ガイドラインです。*
